:- dynamic energy_time_series/4.

% convertJSON(+Filepath)
% oeffnet,laedt und schreibt letztenendes die Eintraege in data.pl im gewuenschten energy_time_series-Format.
convertJSON(File):- 	use_module(library(http/json)),
	open(File,read,Input),
	json_read(Input,JSON),
	close(Input),
	open('data.pl',write,Write),
	handleJSON(JSON,Write),
	close(Write),
	[data].

% handleJSON(+JSON-File,+Stream)	
handleJSON([],_).
handleJSON([A1|A],W):- makeJSON(A1,W), handleJSON(A,W).

% makeJSON(+JSON-Listenelement,+Stream)
% Bringt ein Listenelement des eingelesenen JSON-Files in das von der Aufgabenstellung gewuenschte Format.
makeJSON(json([key=[json([_,de= Type,_,_])],_,_,_,values=[[Starttime|A]|B]]),W):- 
	mJ(Type,Starttime,A,B,W).
makeJSON(json([key=[json([_,de= Type,_,_])],_,_,values=[[Starttime|A]|B]]),W):- 
	mJ(Type,Starttime,A,B,W).
makeJSON(json([key=[json([_,de= Type,_,_])],_,values=[[Starttime|A]|B]]),W):-
	mJ(Type,Starttime,A,B,W).

% mJ(+Type,+Starttime,+Wert,+WerteListe,+Stream)
% Dieses Praedikat schreibt den Eintrag in data.pl	.
mJ(Type,Starttime,A,B,Write):-
	valuemaker([[Starttime|A]|B],[],Values),
	write_canonical(Write,energy_time_series(Type,Starttime,3600,Values)),
	writeln(Write,'.').

% valuemaker(+WerteListe,+Akku,?Valueliste)
% Nimmt sich aus der Werteliste, welche Eintraege bestehend aus Zeit und Wert besitzt, nur die Werte und packt diese in eine neue Liste.	
valuemaker([],A,B):- reverse(A,B).
valuemaker([[_,A2]|A],B,C):- valuemaker(A,[A2|B],C).

% gran_changer(+Type,+Granularitaet,?energy_time_series-Struktur)
% Aendert die Granularitaet fuer einen energy_time_series-Eintrag.
gran_changer(Type, G, F) :- 
	energy_time_series(Type, Starttime,T1,V1),
	F = energy_time_series(Type, Starttime,G,V2),
	A is G/T1,
	A >= 1,
	integer(A),
	calc_val(V1,A,[],A,0,V2),!.
	
% calc_val(+Valueliste,+Vergroesserungsfaktor,+Akku,+FesterVergroesserungsfaktor,+Startsumme,?neueGranularitaet)
% nimmt eine Valueliste und passt sie an die gegebene Granularitaet an. 
calc_val(A,0,V2a,B,X,V2) :-
	calc_val(A,B,[X|V2a],B,0,V2).
calc_val([],_,V2a,_,_,V2) :- reverse(V2a,V2).
calc_val([V1|V],A,V2a,B,X,V2):-
	A > 0,
	A1 is A-1,
	X1 is V1+X,
	calc_val(V,A1,V2a,B,X1,V2).


% transp(+Liste,?transponierteListe)
% transponiert eine Liste.
transp([A1|A],B2):-
	t1(A1,[],B),
	transp2(A,B,B1),
	reverse_lists(B1,B2,[]).

% transp2(+Liste,+bereitskorrekteListe,?BeideListenvereint)
% Hilsfunktion von transp.	
transp2([],B,B).
transp2([A1|A],B,B1) :-
	t2(A1,B,B2,[]),
	transp2(A,B2,B1).

% t1(+Liste,+Akku,+neueListe)
% Macht aus einer n-elementigen Liste eine Liste mit n inneren Listen. Wichtig fuer den Anfang.	
t1([],B,B1) :- reverse(B,B1).
t1([A1|A],B,B1) :- t1(A,[[A1]|B],B1).

% t2 (+Liste1,+Liste2,?neueListe,+Akku)
% Fuegt jeweils ein Element von Liste1 in eine Unterliste von Liste2.
t2([],_,B1,B) :- B = B1.
t2([A1|A],[B1|B],B2,B3) :- is_list(B1), t2(A,B,B2,[[A1|B1]|B3]).

% reverse_lists(+Liste,?neueListe,+Akku)
% Dreht alle inneren Listen einer Liste um.
reverse_lists([],B,B).
reverse_lists([A1|A],B,C) :- reverse(A1,A2), reverse_lists(A,B,[A2|C]).

% Berechnet den totalen Stromverbrauch, indem alle Werte aller Erzeugungsarten addiert werden.
total :- 
	findall(Values,energy_time_series(_, 1388530800000,3600, Values),X),
	transp(X,Y),
	sumlists(Y,[],Z),
	assert(energy_time_series('Total',1388530800000,3600,Z)).

% sumlists(+Liste,+Akku,?SumListe)
% Summiert die inneren Listen einer Liste auf.	
sumlists([],Z,E) :- reverse(Z,E).
sumlists([Y1|Y],Z,E) :- 
	sum_list(Y1,S),
	sumlists(Y,[S|Z],E).
	
% pearson_kor(+Zeitreihe1,+Zeitreihe2,?Korrelation)	
% Umsetzung der Formel.
pearson_kor(R1,R2,E) :-
	length(R1,N),
	length(R2,N),
	prodlist(R1,R2,0,Z1),
	sum_list(R1,Z2),
	sum_list(R2,Z3),
	prodlist(R1,R1,0,Z4),
	prodlist(R2,R2,0,Z5),
	E1 is N*Z1-Z2*Z3,
	E2 is sqrt(N*Z4-Z2*Z2),
	E3 is sqrt(N*Z5-Z3*Z3),
	E is E1/(E2*E3).

% prodlist(+Liste1,+Liste2,?ProdListe)
% Nimmt zwei Listen,multipliziert indexgleiche Elemente miteinander und tut die Ergebnise wieder in eine Liste.	
prodlist([],[],E,E).
prodlist([A1|A],[B1|B],Z,E) :-
	K is A1*B1+Z,
	prodlist(A,B,K,E).

% korrelation(+Type)
% Findet die Stromerzeugungsart, die am staerksten mit dem Gesamtstromverbrauch korreliert.
korrelation(E) :-
	findall([Art,Values],(energy_time_series(Art, 1388530800000,3600, Values),not(Art='Total')),X),
	energy_time_series('Total',1388530800000,3600,Z),
	korr(X,Z,-1,_,E),!.

% korr(+Liste,+Total-Values,+Pearson-WorstCase,?Artspeicherung,?Ergebnis)
% Praedikat, dass fuer jede Stromerzeugungsart mit dem Totalverbrauch die Korrelation berechnet, und das groesste Ergebnis zurueckgibt.	
korr([],_,_,E,E).
korr([[X,Y]|A],Z,B,_,F) :-
	pearson_kor(Y,Z,C),
	C > B,
	korr(A,Z,C,X,F).
korr([_|A],Z,B,E,F) :-
	korr(A,Z,B,E,F).

	
%lastprofil(+Typ, +GranularitÃ¤t, ?Profil)
% berechnet das Lastprofil zu einer gegebenen Stromerzeugungsart und einer gegebenen Granularitaet.
lastprofil(energy_time_series(_,_,T1,V),G,P) :-
	A is G/T1,
	A >= 1,
	integer(A),
	split_lists(V,A,[[]],A,E),
	transp(E,F),
	length(E,H),
	sumlists(F,[],Z),
	divlist(Z,H,[],P),!.

% split_lists(+Valueliste,+Faktor,+Akku,+Faktorsicherung,?Ergebnis)
% Passt eine Valueliste der Granularitaet an, bestimmte Werte werden also zusammengetan (bsp. Alle Montage)	
split_lists([],_,E,_,F) :- reverse_lists(E,F,[]).
split_lists([V1|V],0,B,C,E) :-
	A is C-1,
	split_lists(V,A,[[V1]|B],C,E).
split_lists([V1|V],A,[B1|B],C,E) :-
	A > 0,	
	A1 is A-1,
	split_lists(V,A1,[[V1|B1]|B],C,E).

% divlist(+Liste,+Divisor,+Akku,?Ergebnis)
% Bildet den Mittelwert.	
divlist([],_,A,B) :- reverse(A,B).
divlist([V1|V],A,B,E) :-
	V2 is V1/A,
	divlist(V,A,[V2|B],E).


:- convertJSON('month_2014_01.json').
:- total.
:- assert(energy_time_series('TotalUnknown', 0, 3600, [49.303999999999995, 47.464, 46.848, 47.52400000000001, 48.61799999999999, 50.121, 55.127, 60.649, 63.629, 65.098, 66.501, 67.15, 67.37100000000001, 67.601, 65.281, 63.54400000000001, 61.659, 60.68800000000001, 60.101000000000006, 57.771000000000015, 55.370000000000005, 54.090999999999994, 49.959999999999994, 46.35800000000001, 43.492, 40.726, 41.116, 41.70100000000001, 41.636, 41.934999999999995, 43.135999999999996, 46.11, 48.67099999999999, 51.367, 53.394999999999996, 54.315, 53.682, 52.117000000000004, 50.937, 50.1, 50.357, 50.55499999999999, 50.16999999999999, 49.39999999999999, 48.099999999999994, 47.104, 44.654999999999994, 41.83099999999999, 38.637999999999984, 37.648999999999994, 37.171, 37.18299999999999, 37.57299999999999, 38.37699999999999, 39.12899999999999, 40.096, 42.120000000000005, 44.33, 46.172999999999995, 48.446999999999996, 48.778, 47.26899999999999, 46.608999999999995, 46.432, 45.93299999999999, 46.444, 47.271, 46.45100000000001, 46.189, 45.958, 44.202, 41.803, 40.579, 39.61600000000001, 40.104, 40.746, 41.83299999999999, 44.404999999999994, 50.562000000000005, 56.56700000000001, 60.46999999999999, 62.49299999999999, 64.596, 65.85799999999999, 64.291, 64.211, 63.648, 62.406000000000006, 60.511, 59.99700000000001, 59.373999999999995, 58.36599999999999, 56.505, 54.858, 51.129999999999995, 47.732, 46.037000000000006, 45.248999999999995, 45.08800000000001, 45.315, 46.32400000000001, 49.26299999999999, 54.04, 58.352999999999994, 62.026, 63.67799999999999, 65.205, 66.505, 65.495, 64.518, 63.14699999999999, 62.278, 60.478999999999985, 59.080999999999996, 58.458, 58.12500000000001, 56.267, 55.06100000000001, 51.355000000000004, 47.270999999999994, 46.16099999999999, 44.445, 44.97200000000001, 44.96200000000001, 46.386, 49.008, 53.23100000000001, 58.774, 62.21600000000001, 63.518, 64.481, 65.86999999999999, 64.941, 63.86200000000001, 61.952, 60.479, 59.37299999999999, 58.742999999999995, 57.846, 57.894999999999996, 56.019999999999996, 54.880999999999986, 50.98299999999999, 46.519000000000005, 44.336999999999996, 43.699999999999996, 44.159, 44.63, 45.99100000000001, 47.574999999999996, 53.169999999999995, 58.82500000000001, 61.754000000000005, 62.608, 64.233, 65.5, 64.82300000000001, 64.038, 63.26499999999999, 61.45, 59.778, 59.40299999999999, 59.038000000000004, 58.679, 56.128, 55.43299999999999, 51.36000000000001, 47.406000000000006, 46.102, 43.91499999999999, 44.455999999999996, 44.07099999999999, 44.321999999999996, 46.351, 51.81799999999999, 57.277, 61.579, 63.10999999999999, 64.744, 65.785, 64.97300000000001, 63.062, 61.153999999999996, 59.733000000000004, 58.986, 58.644999999999996, 57.463, 56.373999999999995, 53.638, 52.709999999999994, 49.3, 46.303999999999995, 42.33, 40.489, 40.13999999999999, 39.43899999999999, 39.32300000000001, 39.788999999999994, 40.547999999999995, 42.940999999999995, 46.355, 49.031000000000006, 51.489000000000004, 54.223, 55.041, 54.31400000000001, 53.138000000000005, 51.218, 49.547999999999995, 47.246, 47.387, 46.614999999999995, 45.315999999999995, 45.135999999999996, 42.937999999999995, 41.28, 38.596000000000004, 36.21199999999999, 35.760999999999996, 35.206, 35.429, 35.776, 36.168, 37.966, 41.627, 44.620999999999995, 48.289, 52.18000000000001, 53.298, 53.239999999999995, 52.379000000000005, 50.398999999999994, 48.932, 46.745, 45.552, 45.10399999999999, 45.606, 45.307, 44.052, 41.461999999999996, 41.169999999999995, 40.125, 40.528, 41.437, 42.809, 45.29899999999999, 51.63, 57.786, 61.157, 62.294, 64.1, 65.576, 64.63, 64.768, 64.59700000000001, 63.42100000000001, 61.32699999999999, 61.00200000000001, 60.23299999999999, 59.49, 58.24799999999999, 56.358000000000004, 51.400999999999996, 48.286, 46.998999999999995, 46.224000000000004, 46.176, 47.047000000000004, 47.885000000000005, 49.831, 55.716, 60.57000000000001, 63.687000000000005, 64.858, 67.83800000000001, 69.804, 70.38, 69.557, 67.164, 64.80099999999999, 62.3, 60.997, 60.181999999999995, 58.892999999999994, 58.08500000000001, 56.194, 51.878, 48.56100000000001, 46.214, 44.347, 45.046, 46.286, 46.769999999999996, 49.272000000000006, 55.228999999999985, 60.254000000000005, 62.818, 63.79399999999999, 66.351, 68.282, 68.43599999999999, 68.114, 67.243, 65.141, 61.88599999999999, 60.497, 60.888, 59.65299999999999, 58.568000000000005, 57.568999999999996, 53.756, 50.301, 47.766000000000005, 46.712999999999994, 47.24699999999999, 47.507000000000005, 48.346999999999994, 49.431, 54.816, 59.928999999999995, 62.617000000000004, 64.46600000000001, 66.55, 68.43299999999999, 67.989, 67.48899999999999, 66.38399999999999, 64.94300000000001, 63.262, 62.042, 61.413000000000004, 60.684, 59.755, 57.30299999999998, 54.09, 50.330000000000005, 47.828, 46.105, 46.334, 46.886, 47.63900000000001, 49.806000000000004, 55.54400000000001, 61.20100000000001, 64.059, 64.982, 66.583, 67.957, 66.40200000000002, 64.543, 63.221999999999994, 61.807, 60.227000000000004, 60.256, 59.126000000000005, 57.86900000000001, 56.251999999999995, 54.309999999999995, 50.86999999999999, 47.01999999999999, 43.608999999999995, 41.916999999999994, 41.065, 40.693999999999996, 40.89800000000001, 41.69800000000001, 42.754000000000005, 45.092, 48.297, 50.964, 53.211, 54.059, 54.671, 53.455999999999996, 52.004999999999995, 49.98599999999999, 48.703, 48.688, 48.808, 47.92099999999999, 47.187000000000005, 45.87799999999999, 43.432999999999986, 40.23899999999999, 38.222, 35.852000000000004, 35.770999999999994, 36.375, 36.399, 36.95099999999999, 37.63500000000001, 39.470000000000006, 41.82200000000001, 45.081, 47.644999999999996, 50.118, 51.432, 51.41, 50.357, 49.653000000000006, 46.827999999999996, 46.20299999999999, 47.475, 48.011, 49.034, 48.544000000000004, 46.6, 42.928, 41.801, 41.131, 41.864, 42.738, 44.203, 46.29800000000001, 54.091, 61.39800000000001, 64.895, 66.114, 68.0, 69.417, 69.805, 69.488, 68.624, 66.953, 65.362, 64.047, 62.828, 61.479, 61.343, 58.974, 55.049, 51.205, 51.889, 50.983999999999995, 50.948, 50.366, 51.516999999999996, 54.05500000000001, 59.36700000000001, 63.928999999999995, 67.315, 67.97500000000001, 69.92800000000001, 70.898, 70.874, 69.745, 69.234, 67.84499999999998, 66.366, 65.569, 64.913, 64.415, 63.06999999999999, 60.70499999999999, 56.309999999999995, 53.21199999999999, 51.068000000000005, 48.848000000000006, 48.782000000000004, 48.995999999999995, 49.74799999999999, 53.09899999999999, 58.30699999999999, 62.65, 65.162, 66.166, 67.202, 68.49499999999999, 67.787, 67.64399999999999, 66.91, 64.98599999999999, 62.94, 62.293, 62.282, 61.477000000000004, 61.993, 59.305, 55.605000000000004, 51.51800000000001, 49.266000000000005, 48.66, 48.545, 48.67700000000001, 49.07899999999999, 52.08599999999999, 58.71500000000001, 63.03000000000001, 64.81599999999999, 65.50699999999999, 66.414, 67.565, 67.417, 67.116, 65.594, 64.81099999999999, 63.279999999999994, 62.752, 62.618, 62.84499999999999, 62.85, 59.8, 55.58, 51.591, 49.592999999999996, 47.706, 47.394, 47.31699999999999, 48.249, 50.985, 58.79200000000001, 63.594, 65.742, 65.33099999999999, 67.007, 68.465, 68.086, 65.653, 64.72800000000001, 63.306, 62.129, 61.187, 61.361000000000004, 60.385, 60.217999999999996, 57.629999999999995, 54.437000000000005, 50.111000000000004, 46.165, 44.858999999999995, 45.202999999999996, 44.135, 44.149, 44.592999999999996, 45.471000000000004, 47.775999999999996, 50.260000000000005, 52.901, 55.574999999999996, 56.723, 56.983, 56.33, 55.169999999999995, 53.47, 52.739, 53.062999999999995, 53.035, 53.326, 52.702, 50.41, 48.931999999999995, 45.96, 44.528000000000006, 42.282, 42.385, 42.364999999999995, 42.5, 42.812, 43.858999999999995, 45.232000000000006, 47.666, 49.977999999999994, 51.494, 54.401999999999994, 53.928000000000004, 52.47899999999999, 52.51599999999999, 52.403999999999996, 50.945, 50.43299999999999, 50.94499999999999, 51.38900000000001, 52.432, 50.076, 48.494, 46.827, 44.37899999999999, 43.256, 43.28199999999999, 43.544, 44.875, 48.405, 56.94299999999999, 62.015, 65.09200000000001, 66.091, 66.102, 66.825, 66.77, 66.776, 66.13099999999999, 65.51700000000001, 63.150000000000006, 63.67100000000001, 62.86599999999999, 62.647000000000006, 63.064, 59.26700000000001, 55.260999999999996, 51.75499999999999, 48.962999999999994, 47.475, 47.946, 48.806, 49.22800000000001, 51.693, 59.230000000000004, 63.921, 65.94599999999998, 66.35900000000001, 67.146, 68.844, 68.084, 67.611, 66.438, 64.71300000000001, 63.559000000000005, 63.43899999999999, 63.198, 62.929, 63.44499999999999, 59.774, 55.772000000000006, 52.241, 49.686, 48.333999999999996, 47.983, 48.175999999999995, 49.261, 51.963, 58.83700000000001, 63.422999999999995, 64.592, 64.27799999999999, 64.853, 66.75099999999999, 66.298, 65.635, 65.269, 64.398, 62.538999999999994, 61.722999999999985, 61.98100000000001, 62.861, 62.772, 60.134, 56.517, 52.154999999999994, 49.352999999999994, 47.775, 47.746, 47.475, 48.785, 51.751, 57.99600000000001, 63.16299999999999, 64.028, 64.99, 65.452, 66.523, 66.03399999999999, 65.74199999999999, 65.02599999999998, 64.184, 63.050999999999995, 62.80799999999999, 63.555, 64.23299999999999, 64.72, 61.059999999999995, 57.791999999999994, 54.04])).